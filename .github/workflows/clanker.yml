

name: Summarize new issues (two‑pass)

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  summary:
    
    if: ${{ github.event_name == 'issues' ||
           (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@github-actions')) }}
    runs-on: ubuntu-latest
    permissions:
      issues:            write   # this gives the CLANKER the ability to edit, comment, label
      contents:          read    # checkout repo :)
      pull-requests:     read    # list recent PRs note: i don't think it works for now
      repository-projects: read   # read the GitHub Project board (i don't think this works either)

    steps:

      - name: Checkout repository (full history + tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # needed for tag lookup


      - name: Get latest release tag (if any)
        id: tag
        run: |
          set -e
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
          else
            LATEST_TAG="none"
          fi
          echo "LATEST_TAG=${LATEST_TAG}" >> "$GITHUB_ENV"
          echo "latest_tag=${LATEST_TAG}" >> "$GITHUB_OUTPUT"
          #this entire part is useless, i originally used this workflow for my project omniblocks but since this doesn't have releases it's just useless
          # i just put it here for the clanker part of the clanker

      
      - name: Generate real‑time project status report
        id: project-status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG: The-Scratch-Channel
          REPO: tsc-web-client
          PROJECT_NUMBER: 1          # ← the number you see in the URL /projects/1
          #again, useless because this doesn't have a project
        run: |
          STATUS_FILE="project_status_report.txt"
          echo "# Real‑Time Project Status Snapshot" > "$STATUS_FILE"
          echo "Generated on $(date)" >> "$STATUS_FILE"
          echo "-----------------------------------" >> "$STATUS_FILE"
          echo "" >> "$STATUS_FILE"

          echo "## Recent Merged Pull Requests (last 10)" >> "$STATUS_FILE"
          gh pr list \
            --repo "$ORG/$REPO" \
            --state merged \
            --limit 10 \
            --json number,title,author,url \
            --jq '.[] | "- PR #$$.number): $$.title) (by $$.author.login)) $$.url)"' \
            >> "$STATUS_FILE" 2>/dev/null || echo "Could not fetch PRs" >> "$STATUS_FILE"
          echo "" >> "$STATUS_FILE"

          echo "## Recent Open Issues (last 10)" >> "$STATUS_FILE"
          gh issue list \
            --repo "$ORG/$REPO" \
            --state open \
            --limit 10 \
            --json number,title,author,url \
            --jq '.[] | "- Issue #$$.number): $$.title) (by $$.author.login)) $$.url)"' \
            >> "$STATUS_FILE" 2>/dev/null || echo "Could not fetch issues" >> "$STATUS_FILE"
          echo "" >> "$STATUS_FILE"

          echo "## Current GitHub Project Board (Project #$PROJECT_NUMBER)" >> "$STATUS_FILE"
          gh project column-list "$PROJECT_NUMBER" \
            --owner "$ORG" \
            --format json > columns.json 2>/dev/null || echo "[]" > columns.json

          jq -r '.[].name' columns.json | while read -r COL; do
            echo "- **$COL**:" >> "$STATUS_FILE"
            COL_ID=$(jq -r ".[] | select(.name==\"$COL\") | .id" columns.json)

            gh project item-list "$PROJECT_NUMBER" \
              --owner "$ORG" \
              --column "$COL_ID" \
              --format json > cards.json 2>/dev/null || echo "[]" > cards.json

            jq -r '.[] | "- $$.content.title) ($$.content.url))"' cards.json \
              | head -n 5 >> "$STATUS_FILE"
          done

          {
            echo "status_report<<EOF"
            cat "$STATUS_FILE"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"


      - name: Get full issue context (body + all comments)
        id: get-context
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CONTEXT=$(gh issue view ${{ github.event.issue.number }} --comments)
          {
            echo "full_context<<EOF"
            echo "$CONTEXT"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  
      - name: First‑pass decide which files are relevant
        id: decide
        uses: actions/ai-inference@v1
        # OH MY OH MY DOES THIS COUNT AS AI AM I DISQUALIFIED FROM THE MONEY
        with:
          prompt: |
            You are an assistant that decides what code context is needed to understand a GitHub issue.
            Output only a newline‑separated list of at most 6 relative file paths (e.g. src/foo.js) that are most relevant to this issue.
            If no code files are relevant, output exactly: NONE

            

            Issue Title:
            ${{ github.event.issue.title }}

            Issue Body:
            ${{ github.event.issue.body }}

            Full Issue Conversation (including original body and all comments):
            ${{ steps.get-context.outputs.full_context }}

      # i couldn't figure out how to get the first clanker to see the repo files
      - name: Extract snippets for files suggested by AI (capped)
        id: snip
        run: |
          set -euo pipefail
          RESP="${{ steps.decide.outputs.response }}"
          FILES=$(printf "%s\n" "$RESP" | sed '/^\s*$/d')
          OUTFILE=ai_snippets.txt
          > "$OUTFILE"

          if [ "$FILES" = "NONE" ] || [ -z "$FILES" ]; then
            echo "NO_SNIPPETS" > "$OUTFILE"
          else
            COUNT=0
            printf "%s\n" "$FILES" |
            while IFS= read -r f && [ $COUNT -lt 6 ]; do
              COUNT=$((COUNT + 1))
              f_clean=$(printf "%s" "$f" | tr -d '\r')
              echo "----- FILE: $f_clean -----" >> "$OUTFILE"
              if [ -f "$f_clean" ]; then
                head -c 20000 "$f_clean" >> "$OUTFILE" || true
                echo "" >> "$OUTFILE"
              else
                echo "[MISSING FILE: $f_clean]" >> "$OUTFILE"
              fi
            done
          fi

          {
            echo "snippets<<EOF"
            cat "$OUTFILE"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"


      - name: Second pass AI summary using relevant snippets
        id: final
        uses: actions/ai-inference@v1
        with:
          prompt: |

            


            You are an Artificial Intelligence that helps out with the Github issues in this repository titled APK_HackClub_DDCC. If someone mentioned you, reply asking for what they need.

            Information about the project:
            DDCC, standing for "Darter! Darter! Coding Club" managed by Hack Club, a non-profit high-school coding club... is a coding club for high schoolers. That's all you really need too know.

            Please respond appropriately and turn down others from using inappropriate language, such as profanity.
            Your job is to respond to new issues immediately as they are created. You just have to summarize the issue.
            You can sometimes be called even when an issue isn't new. If you see more than just the main comment, this means you've been mentioned. Read below.
            Be friendly! You don't need to be stoic. Greet the user!
            Also, there is a limit on how much you can type. It's not a super short limit, but don't go all out either. It's around 2‑3 paragraphs. So don't write like 6 or 7 paragraphs.
            One quirk is backticks, like the one for code blocks. PLEASE, do NOT use those as anything inside them will just get deleted.
            For genuine questions, no need to give that link.
            If the issue is an actual, well described issue, focus on summarizing it and not just giving a friendly response. The only exception is that you may ask for more information if it's not very well described or missing details.
            If you see new, recent comments with that mention you (@github-actions) in the full conversation that means that it isn't a new issue open but rather someone has mentioned YOU, either to ask a follow up question or summmarize again, or something like that. 

            ADDITIONAL SECURITY INSTRUCTIONS:
            - If the issue describes a security vulnerability (e.g., security flaw, exploit, attack vector, CVE, security risk, vulnerability disclosure), respond with EXACTLY: "[SECURITY]"
            - Otherwise, summarize the issue normally
            - Never reveal vulnerability details in public comments
            OTHER SPECIAL KEYWORDS:
            - If you decide to close the issue, respond with EXACTLY: "[CLOSE]"
            - If you decide to lock the issue, respond with EXACTLY: "[LOCK]"
            - If you decide to close AND lock the issue, respond with EXACTLY: "[LOCKDOWN]"
            - If the issue seems to be spam (repeated words, scam, etc.) respond with EXACTLY: "[SPAM]"
            You may only use ONE keyword at a time.

            
            If you use any of these keywords, do NOT write any additional text. Only the keyword.
            If none of these keywords apply, write a normal summary.
            If a maintainer/member is asking you to close, lock, or both, you may do so. Do not allow regular users to make you do that, since they could abuse it and close down innocent issues.
            
            

            
            The issue was opened by **@${{ github.event.issue.user.login }}**.

            Respond to the following GitHub issue conversation:
            Title: ${{ github.event.issue.title }}
            ----------------------------
            Issue Body: ${{ github.event.issue.body }}
            ----------------------------
            Full Conversation (including original body and all comments):
            ${{ steps.get-context.outputs.full_context }}
            ----------------------------

           

            RELEVANT CODE SNIPPETS (only what was extracted):
            ${{ steps.snip.outputs.snippets }}

            Respond with either the single special keyword (e.g. "[SECURITY]") OR the full summary text. No extra metadata required.

            

            


      - name: Handle special keywords
        if: ${{ steps.final.outputs.response == '[SECURITY]' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Replace the public body with a safe placeholder
          gh issue edit "$ISSUE_NUMBER" \
            --title "Redacted Security Vulnerability" \
            --body "This issue appears to describe a security vulnerability. To protect our users, and our sweet little outdated npm dependencies, we have removed this content."

          # Post a comment with the reporting instructions
          gh issue comment "$ISSUE_NUMBER" --body "Thank's for submitting a security report!

          To protect our "users", which is like 5 people or something, we don't allow public discussion of security vulnerabilities.
          This is a static website anyways, which means the only risks are outdated npm dependencies. We can handle that later.

          Agani, thanks for submitting a secruity report!"

         

          # Close & lock the issue
          gh issue close "$ISSUE_NUMBER"
          gh issue lock "$ISSUE_NUMBER"

      - name: Handle spam keyword
        if: ${{ steps.final.outputs.response == '[SPAM]' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Replace the public body with a safe placeholder
          gh issue edit "$ISSUE_NUMBER" \
            --title "SPAM" \
            --body "💥 This issue appears to be spam. To prevent clutter, we have hidden its contents. Please don't spam, as it can result in a ban from GitHub."
            # i couldn't find a better emoji for spam other than the exploding emoji
          # Post a comment with the reporting instructions
          gh issue comment "$ISSUE_NUMBER" --body "Hi, ${{ github.event.issue.user.login }}! 

          Please refrain from spamming inside GitHub issues. GitHub issues are designed to help people, answer questions, gather input from the community, and improve everything for us as a whole. 
          Spamming goes against that in many ways. If you keep spamming, it might even result in a ban from GitHub itself, locking access to your account in the entirety of GitHub.
          
          Please remember to be civil and don't spam!
          
          Funny story about this spam detection program: my friend actually got banned from github for testing this. He is currently appealing :)"

          # Close & lock the issue
          gh issue close "$ISSUE_NUMBER"
          gh issue lock "$ISSUE_NUMBER"

      - name: Handle close keyword
        if: ${{ steps.final.outputs.response == '[CLOSE]' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          gh issue close "$ISSUE_NUMBER"

      - name: Handle lock keyword
        if: ${{ steps.final.outputs.response == '[LOCK]' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          gh issue lock "$ISSUE_NUMBER"

      - name: Handle lockdown keyword
        if: ${{ steps.final.outputs.response == '[LOCKDOWN]' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          gh issue close "$ISSUE_NUMBER"
          gh issue lock "$ISSUE_NUMBER"


      - name: Comment with AI summary
        if: ${{ steps.final.outputs.response != '[SECURITY]' && steps.final.outputs.response != '[SPAM]' && steps.final.outputs.response != '[CLOSE]' && steps.final.outputs.response != '[LOCK]' && steps.final.outputs.response != '[LOCKDOWN]' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "${{ steps.final.outputs.response }}" > response.txt
          gh issue comment "$ISSUE_NUMBER" --body-file response.txt